@model UniProject.Models.Property

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <style>
        .myfooter {
            position: relative!important;
        }
    </style>
</head>
<div class="s01">
    @using (Html.BeginForm("PropertyList", "Properties", FormMethod.Post))
    {


        <fieldset>
            <legend>Find your next property with <span>august</span></legend>
        </fieldset>
        <div class="inner-form">
            <div class="input-field first-wrap">
                <!--<input id="search" type="text" placeholder="Find a City?" />-->
                @Html.TextBoxFor(model => model.City, new { @class = "form-control", @placeholder = "Find a City?" })


            </div>

            <!--<input type="radio" class="radio" name="test" id=i1 checked>-->
            @Html.RadioButtonFor(r => r.RentOrBuy, "true", new { @class = "radio", @checked = "true" })
            <h2 class="MyH2-1">Rent</h2>
            <!--<input type="radio" class="radio" name="test" id=i2>-->
            @Html.RadioButtonFor(r => r.RentOrBuy, "false", new { @class = "radio" })
            <h2 class="MyH2-1">Buy</h2>

            <div class="input-field third-wrap">
                <button class="btn btn-search" type="submit">Search</button>


            </div>
        </div>


    }
</div>
<div class="pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center my-bg-col my-pg-bt">
    

   
   

    <h1 class="display-4">I've been helping people move since 1996</h1>
    <p class="lead">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged..</p>

   
       
   

</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#CityName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Properties/Index",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.CityName, value: item.CityName };
                        }))

                    }
                })
            },
            messages: {
                noResults: "", results: ""
            }
        });
    })
</script>
  
